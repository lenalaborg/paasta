[TEST]

o    30문항 
o    객관식 + 주관식 (단답형- 명령어, 순서..)
1. 클라우드 특징
  - 주문형 셀프 서비스 : 사용자의 개별 관리화면을 통해 서비스 이
  - 광범위한 네트워크 접속용 : 다양한 디바이스를 통해 서비스에 접
  - 리소스 공유속 : 여러 사용자가 공유하는 형태 이
  - 신속한 확장성용 : 스케일 업과 스케일 다운 가
  - 측정 가능한 서비스능 : 종량
 
* Cloud 기본 속성
- 경제성, 유연성, 가용성, 빠른 구축 속도
        
2. 클라우드 서비스 모델의 관점 
- IaaS : IT 전문가
- PaaS : 소프트웨어 개발자
- SaaS : 최종 사용자

* IaaS < CaaS < PaaS/aPaaS < FaaS < SaaS
  IaaS : Server, Storage, Network
  CaaS : Containers, Volumes, Ips&Ports, Load Balancers
  PaaS : 개발 프레임워크, Middleware, OS
  SaaS 데이터, 웹서비스, 웹 오피스 

3. PaaS를 사용하는 목적 
- Platform as a Service : 기업의 애플리케이션 실행 환경 및 개발 환경을 서비스로써 제공하는 모델 
- 필요성 : 시장 니즈에 빠르게 대응할 수 있는 능력이 곧 경쟁력이다. 
- 장점 : 단기간에 애플리케이션을 개발하여 서비스를 제공
  플랫폼 제공, SaaS 개발을 개발 플랫폼에 확장한 방식, 웹서에서 쉽게 빌려 쓸 수 있는 모델, 
  애플리케이션이 동작하는 주변 환경을 가져다 쓰는 구조, DevOps 문화를 적용하기 용이함 

4. PaaS - Hybrid의 장점이 아닌 것은 ?
  - 제어, 유연성, 비용 효율성, 용이성
* Public : 비용 절감, 유지 관리하지 않음, 높은 안정성, 무제한에 가까운 확장성 
* Hybrid : 제어, 유연성, 비용 효율성, 용이성
* Private : 유연성 향상, 보안 강화, 높은 확장성

* PaaS 동작 원리 
배표 명령 실행 > Diego 컨테이너 생성 > 애플리케이션 코드 배치 > 적합한 빌드팩 찾기 > 컴파일 실행

5. 용어들 : PaaS(PaaS-TA)
 - Org > Space > Service
 - Org : Org Manager, Org Auditor, Org Billing Manager, Org User
 - Space : Space Manager, Space Developer, Space Auditor
   (Space Developer만이 애플리케이션 실행 및 서비스 연동 할 수 있음)
 - Application : 사용자가 제작한 결과물
 - Service : Application동작에 필요한 부가 서비스
 
 - CF 명령어 : Org, Space, User 생성 및 User 권한 할당
 $ cf create-org test-org
 $ cf create-space test-space -o test-org
 $ cf create-user test test1234
 $ cf set-org-role test test-org OrgManager
 $ cf set-space-role test test-org test-space SpaceManager
 $ cf set-space-role test test-org test-space SpaceDeveloper

6. SaaS 관련된 내용들 
 - Tennat와 관련되어..올바른것  Application & Data, 보안, 가용성, 확장성.., 과금 …
 - 성숙된 SaaS는 Multi Tenant, Configuration, Scalability 충족
 - 환경 설정(Configuration) : 사용자가 필요한 기능은 설정을 통해 지원
 - 다중 사용자 지원(Multi-Tenancy) : 하나의 어플리케이션을 다수의 사용자(Tenant)가 공유
 - 확장성(Scalability) : 가상화·분산병렬 처리 등을 통해 확장성 있는 서비스를 제공
 - 사용자가 독립적으로 이용할 수 있는 응용 SW / 데이터를 제공하는 클라우드 서비스
   테넌트 : Application & Data, 보안, 가용성, 확장성, 과금
 
7. Cloud Native App 개념  
 - Native Application: 특정 Platform이나 Device에서 사용되도록 개발된 Application
 - Web Application: 웹서비스,Device에 상관 없이 사용되도록 개발된 Application 
 - Cloud Native Application : 라우드 환경에서 실행되는 어플리케이션 프로그램, 느슨한 결합등 
   => 핵심은 서비스 : 애플리케이션을 서비스로 구문, 서비스를 어떻게 구성, 관리하느냐

8. 전통적 아키텍처 vs Cloud Native 아키텍처 차이점 
 - 느슨한 결합. Scale Out등 표 참조 
 - Cloud Native 아키텍처 : Scale Out, 분산 & Microservices, Stateless, 대기시간 허용, 느슨한 결합, 
   인프라와 무관 & 유연한 인프라 / 유연한 용량,  오픈소스 / 지원 라이센스, 자동 복구,Active/Active
 - Cloud Native Application 특징 : 서비스, 오류/에러 처리, 수평적 확장성, 비동기 처리, 무상태 모델, 인력 개입 최소화 및 지속적인 배포(CI/CD)
 - 필요성 : 빠른 배포 (delivery), 안전성 (fault tolerance, design for failure), 확장성 - Scalability, 고객 다양성
   
9. MicroService : ONE THING, SMALL, API, AUTONOMOUS
 - 장점 : 보다 빠르고 간단한 배치와 롤백, 각 도메인에 적합한 프레임워크 도구 언어, 더 큰 탄력성, 더 나은 가용성
 - 아키텍처 구성하기 위한 핵신 요소 : 서비스, DevOps, 데이터 분리, API Gateway
 
10. Bosh 개념 (11p)
 - BOSH는 PaaS를 이루는 VM들을 설치 및 관리하는 도구
 - BOSH는 manifest 파일을 사용하여 사용자에게 전체 시스템의 작동 방식과 각 부분의 상호 작용 방식을 정의하도록 요청
 - BOSH manifest는 해당 시스템의 모든 부분을 manifest를 통해 추적
 - 시스템의 각 부분에 에이전트를 배치하여 하나의 제품에 오류가 발생하면 운영자에게 신속하게 경고하고 문제를 자동으로 복구할 수 있음 (라이프 관리의 이점)
 - 운영자는 일반적으로 BOSH 커뮤니티에서 BOSH로 구축된 다양한 릴리스를 작성하고 관리하는 사람

11. Bosh 구성 컴포넌트의 역할들  (15p)
- Release : 설치 패키지, 설정 템플릿, 스크립트
- Stemcell : OS 이미지, 에이전트
- Manifest : 릴리즈, 스템셀, 네트워크, 속성
> BOSH CPI > IaaS 환경

12. Bosh 배포의 3가지 요소 / Release (p16~p17)
- Packages : VM에 설치될 패키지
- Jobs : VM에서 수행될 프로세스
=> Release = Packages와 Job의 모음
=> Stemcell 구성 : 기본 OS 이미지 + BOSH Agent

* BOSH 샘플환경 설명 및 배포 (p34)
- 설치 shell 파일은 각 iaas별로 존재하며 bosh 설치 시 명령어는 create-env로 시작
- Shell이 아닌 bosh command로 실행이 가능하며 설치하는 IaaS 환경에 따라 Option들이 달라짐

* jumpbox 로그인 p44 ??
- jumpbox 설치 후 정상서비스 확인
$ sudo su
$ monit summary 실행

   => BOSH설치 시 option file에 jumpbox-user.yml을 추가
        $ cd ~/workspace/paasta-4.0/deployment/bosh-deployment
        $ bosh int {iaas}/creds.yml --path /jumpbox_ssh/private_key > jumpbox.key
        $ chmod 600 jumpbox.key
        $ ssh jumpbox@{bosh_ip} -i jumpbox.key
        --------------------------------------
        $ cd ~/workspace/bosh-deployment
        $ bosh int ~/workspace/bosh-deployment/creds.yml --path /jumpbox_ssh/private_key > jumpbox.key 
        $ chmod 600 jumpbox.key
        $ ssh jumpbox@192.168.50.58 -i jumpbox.key

13. Cloud-Config를 배포하였는데, 여기에 들어 있는 내용은? 
- PaaS-TA 설치를 위해 IaaS 관련 network, storage, vm 설정 정의
- cloud-config  p51
  availability_zone 
  disk_types
  ## azs는 가용 zone에 대한 설정으로 paasta가 설치될 zone에 대한 정의이다.
  ## vm_type은 paasta vm이 설치될 spec을 정의하며 instance_type은 openstack flavor에 설정 되어 있어야 한다
  ## network은 paasta vm이 생성될 network관련 정의이다. openstack의 subnet및 security_group, dns, gateway 등에 대한 정보를 설정한다
  ## vm_extentions는 관련 보안 그룹 및 로드 밸런서와 같은 임의의 IaaS 특정 구성을 지정할 수 있는 클라우드 구성의 가상 컴퓨터 구성이다.

14. Deployment 관련 내용 … (쉬운것)
- manifest (p64)

15. EXPORT 해서 사용하는 것 … 
 BOSH_CLIENT
 BOSH_CLIENT_SECRET
 BOSH_CA_CERT
 Credentials 파일내용을 읽는 bosh의 명령어  (주관식) 
 bosh int file  --path
 bosh alias-env vbox -e 192.168.50.6 --ca-cert <(bosh int ./creds.yml --path /director_ssl/ca)

 $ export CREDPATH=/home/ubuntu/workspace/bosh-deployment
 $ export BOSH_CA_CERT=$(bosh int $CREDPATH/creds.yml --path /director_ssl/ca)
 $ export BOSH_CLIENT=admin
 $ export BOSH_CLIENT_SECRET=$(bosh int $CREDPATH/creds.yml --path /admin_password)
 $ bosh alias-env vbox -e 192.168.50.58 --ca-cert <(bosh int $CREDPATH/creds.yml --path /director_ssl/ca)
 
 
16. PaaS-TA 설치 순서

 1.       Inception 
 2.       Bosh cli 설치 
 3.       Bosh 배포 
   a.       .. jumpbox
 4.       PaaS-TA 설치  (Bosh를 통한 VM 생성)

17.    Bosh 명령어
- bosh 명령어를 통해 접속하는 방법
- bosh --help

 1. 배포가 다 된후에 … 
 2. bosh -e vbox deployments 
    bosh -e vbox releases     : Release들 (설치할 SW)
    bosh -e vbox vms          : VM 목록
    
    Bosh 환경 설정 옵션
    => --state(bosh의 iaas 설정 정보를 보관),
       --var-store(Bosh 내부 컴포 넌트가 사용하는 인증서 및 인증정보를 생성 저장),
       -o, -v, --var-file(인증서를 사용하는 경우 사용)   
[ Bosh Commands ]
 1) releases
    bosh -e vbox releases
    bosh -e vbox create-release --force --tarball=diego-2.22.0+dev.4.tgz
    bosh -e vbox upload-release ./diego-2.22.0+dev.4.tgz
    bosh -e vbox delete-release diego/2.22.0+dev.4
 2) deployments
    bosh -e vbox deployments
    #delete
    bosh -e vbox -d zookeeper delete-deployment --force
 3) vms & instances
    bosh -e vbox vms
    bosh -e vbox instancesreleases:
 4) ssh
    bosh -e vbox ssh -d {deployment-name} {job-name}
    bosh -e vbox ssh -d cf nats
 5) tasks
    bosh -e vbox tasks
 6) locks
    bosh -e vbox locks
    
18 cf 명령어
cf --help -a
 3) cf 명령(cf apps, cf service, cf --help -a로 확인)
  - cf create-org
    $ cf create-org test-org
    $ cf create-space test-space -o test-org
    $ cf create-user test test1234
    $ cf set-org-role test test-org OrgManager
    $ cf set-space-role test test-org test-space SpaceManager
    $ cf set-space-role test test-org test-space SpaceDeveloper
  - cf Login
    cf login --skip-ssl-validation -a https://api.paas-ta.org -u paasta_trainee06 -p trainee06 -o trainee06 -s dev
  - cf command
    $ vi manifest.yml
    $ cf push -f manifest.yml
    $ cf apps
    $ cf services
    $ cf bind-service welcome-cf mysql01
    $ cf restage welcome-cf
    $ cf env welcome-cf
    $ cf marketplace
    $ cf create-service Mysql-DB Mysql-Plan1-10con mysql02
    $ cf unbind-service welcome-cf mysql01
    $ cf bind-service welcome-cf mysql02
    $ cf restage welcome-cf
    $ cf services
    * cf create-user-provided-service SERVICE_INSTANCE [-p CREDENTIALS]을 이용하여 사용자 제공 서비스를 생성한다.
    $ cf create-user-provided-service extsvc -p "{\"hostname\":\"10.10.1.1\",\"username\":\"user01\",\"password\":\"pass\"}"

19. 기타 
파스타 배포시 시스템 도메인이 하는 역량
adapter VM 역할

시험은 CLI를 주로 이용함

시험 2문제 03.실습4일차
CLI를 활용한 cf명령 실시  p99
bosh int creds.yml --path /jumpbox_ssh/private_key > bosh.key 
bosh int ~/workspace/bosh-deployment/creds.yml --path /jumpbox_ssh/private_key > bosh.key 
